#ifdef TEST

#include "CalcExprModel.test.h"
#include <cassert>
#include "../main/Any/CalcExprModel.h"
#include "../main/Struct/Message.h"

#include <iostream>

namespace ii887522::Calculator
{
	static void testReactMessage()
	{
		{
			CalcExprModel calcExprModel{ 9u };
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "1 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 1 +");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "2 +" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " 1 + 2 +");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "3 -" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "6");
			assert(calcExprModel.value == " 1 + 2 + 3 -");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "4 x" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "2");
			assert(calcExprModel.value == " 1 + 2 + 3 - 4 x");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "5 /" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "10");
			assert(calcExprModel.value == " 1 + 2 + 3 - 4 x 5 /");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "4 +" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "2.5");
			assert(calcExprModel.value == " 1 + 2 + 3 - 4 x 5 / 4 +");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "6 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "8.5");
			assert(calcExprModel.value == " 1 + 2 + 3 - 4 x 5 / 4 + 6 =");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "7 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 7 +");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " sqr(3)");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqrt(9)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " sqrt(sqr(3))");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " sqr(sqrt(sqr(3)))");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqrt(9)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " sqrt(9)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "3 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqrt(9) +");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "1 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "4");
			assert(calcExprModel.value == " sqrt(9) + 1 =");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "1 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 1 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " 1 + sqr(3)");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 1 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqrt(9)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " 1 + sqrt(9)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "3 -" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "4");
			assert(calcExprModel.value == " 1 + sqrt(9) -");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "2 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "2");
			assert(calcExprModel.value == " 1 + sqrt(9) - 2 =");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(2)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "4");
			assert(calcExprModel.value == " sqr(2)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "4 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqr(2) +");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqr(2) +");
			calcExprModel.reactMessage(Message{ Message::Head::LAST_BINARY_OPERATOR, "-" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqr(2) -");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqr(2) -");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "1 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " sqr(2) - 1 =");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "0 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 0 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " 0 + sqr(3)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "9 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " 0 + sqr(3) =");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqrt(9)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " sqrt(9)");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_4 });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "4 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 4 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(4)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "16");
			assert(calcExprModel.value == " 4 + sqr(4)");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 4 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " 4 + sqr(3)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "9 -" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "13");
			assert(calcExprModel.value == " 4 + sqr(3) -");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(4)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "16");
			assert(calcExprModel.value == " 4 + sqr(3) - sqr(4)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "16 x" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "-3");
			assert(calcExprModel.value == " 4 + sqr(3) - sqr(4) x");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(5)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "25");
			assert(calcExprModel.value == " 4 + sqr(3) - sqr(4) x sqr(5)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "25 /" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "-75");
			assert(calcExprModel.value == " 4 + sqr(3) - sqr(4) x sqr(5) /");
		}
		{
			CalcExprModel calcExprModel{ 3u };
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "1 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 1 +");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "2 +" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " 1 + 2 +");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "3 -" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "6");
			assert(calcExprModel.value == " 1 + 2 + 3 -");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "4 x" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "2");
			assert(calcExprModel.value == " 1 + 2 + 3 - 4 x");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "5 /" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "10");
			assert(calcExprModel.value == " 1 + 2 + 3 - 4 x 5 /");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "4 +" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "2.5");
			assert(calcExprModel.value == " 1 + 2 + 3 - 4 x 5 / 4 +");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "6 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "8.5");
			assert(calcExprModel.value == " 1 + 2 + 3 - 4 x 5 / 4 + 6 =");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "7 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 7 +");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " sqr(3)");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqrt(9)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " sqrt(sqr(3))");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " sqr(sqrt(sqr(3)))");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqrt(9)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " sqrt(9)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "3 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqrt(9) +");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "1 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "4");
			assert(calcExprModel.value == " sqrt(9) + 1 =");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "1 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 1 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " 1 + sqr(3)");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 1 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqrt(9)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " 1 + sqrt(9)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "3 -" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "4");
			assert(calcExprModel.value == " 1 + sqrt(9) -");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "2 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "2");
			assert(calcExprModel.value == " 1 + sqrt(9) - 2 =");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(2)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "4");
			assert(calcExprModel.value == " sqr(2)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "4 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqr(2) +");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqr(2) +");
			calcExprModel.reactMessage(Message{ Message::Head::LAST_BINARY_OPERATOR, "-" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqr(2) -");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " sqr(2) -");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "1 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " sqr(2) - 1 =");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "0 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 0 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " 0 + sqr(3)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "9 =" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " 0 + sqr(3) =");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqrt(9)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "3");
			assert(calcExprModel.value == " sqrt(9)");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_4 });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " ");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "4 +" });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 4 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(4)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "16");
			assert(calcExprModel.value == " 4 + sqr(4)");
			calcExprModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcExprModel.message.head == Message::Head::EMPTY);
			assert(calcExprModel.value == " 4 +");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(3)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "9");
			assert(calcExprModel.value == " 4 + sqr(3)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "9 -" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "13");
			assert(calcExprModel.value == " 4 + sqr(3) -");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(4)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "16");
			assert(calcExprModel.value == " 4 + sqr(3) - sqr(4)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "16 x" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "-3");
			assert(calcExprModel.value == " 4 + sqr(3) - sqr(4) x");
			calcExprModel.reactMessage(Message{ Message::Head::UNARY_EXPR, "sqr(5)" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "25");
			assert(calcExprModel.value == " 4 + sqr(3) - sqr(4) x sqr(5)");
			calcExprModel.reactMessage(Message{ Message::Head::BINARY_EXPR, "25 /" });
			assert(calcExprModel.message.head == Message::Head::EXPR_RESULT);
			assert(calcExprModel.message.body == "-75");
			assert(calcExprModel.value == " 4 + sqr(3) - sqr(4) x sqr(5) /");
		}
	}

	void testCalcExprModel()
	{
		testReactMessage();
	}
}

#endif
#ifdef TEST

#include "CalcResultModel.test.h"
#include <cassert>
#include "../../main/Model/CalcResultModel.h"
#include "../../main/Struct/Message.h"

namespace ii887522::Calculator
{
	static void testReactMessage()
	{
		{
			CalcResultModel calcResultModel{ 9u };
			calcResultModel.reactMessage(Message{ });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_3 });
			assert(calcResultModel.getValue() == "123");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_4 });
			assert(calcResultModel.getValue() == "1234");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_5 });
			assert(calcResultModel.getValue() == "12345");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_6 });
			assert(calcResultModel.getValue() == "123456");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_7 });
			assert(calcResultModel.getValue() == "1234567");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_8 });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_9 });
			assert(calcResultModel.getValue() == "123456789");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "123456789");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "123456789");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "123456789");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "1234567");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "123456");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "12345");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "1234");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "123");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SIGN });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SIGN });
			assert(calcResultModel.getValue() == "-1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::ERROR });
			assert(calcResultModel.getValue() == "MATH ERROR");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::FIXED);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "12.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "12 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "0.1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0.1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0.1 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SIGN });
			assert(calcResultModel.getValue() == "0.1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "2 =");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SIGN });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(1)");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(2)");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "2 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(2)");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "2 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_3 });
			assert(calcResultModel.getValue() == "123");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_4 });
			assert(calcResultModel.getValue() == "1234");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_5 });
			assert(calcResultModel.getValue() == "12345");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_6 });
			assert(calcResultModel.getValue() == "123456");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_7 });
			assert(calcResultModel.getValue() == "1234567");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_8 });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_9 });
			assert(calcResultModel.getValue() == "123456789");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "123456789");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "123456789");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "123456789 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 =");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "123456790" });
			assert(calcResultModel.getValue() == "123456790");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "123456790");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "123456790");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "123456790 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_3 });
			assert(calcResultModel.getValue() == "3");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "3");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(3)");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "9" });
			assert(calcResultModel.getValue() == "9");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_MINUS });
			assert(calcResultModel.getValue() == "9");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "9 -");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "123456799" });
			assert(calcResultModel.getValue() == "123456799");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 =");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "123456800" });
			assert(calcResultModel.getValue() == "123456800");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQRT });
			assert(calcResultModel.getValue() == "123456800");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqrt(123456800)");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "11111.111" });
			assert(calcResultModel.getValue() == "11111.111");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "11111.111");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "11111.111 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_MINUS });
			assert(calcResultModel.getValue() == "11111.111");
			assert(calcResultModel.getMessage().head == Message::Head::LAST_BINARY_OPERATOR);
			assert(calcResultModel.getMessage().body == "-");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "0.1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 =");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "11111.111" });
			assert(calcResultModel.getValue() == "11111.111");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DIVIDE });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 /");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 =");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "MATH ERROR" });
			assert(calcResultModel.getValue() == "MATH ERROR");
			assert(calcResultModel.getMessage().head == Message::Head::ERROR);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::FIXED);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DIVIDE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 /");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 +");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "MATH ERROR" });
			assert(calcResultModel.getValue() == "MATH ERROR");
			assert(calcResultModel.getMessage().head == Message::Head::ERROR);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::FIXED);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DIVIDE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 /");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 +");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "MATH ERROR" });
			assert(calcResultModel.getValue() == "MATH ERROR");
			assert(calcResultModel.getMessage().head == Message::Head::ERROR);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::FIXED);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_3 });
			assert(calcResultModel.getValue() == "3");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "3");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(3)");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "9" });
			assert(calcResultModel.getValue() == "9");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 =");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_MULTIPLY });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 x");
		}
		{
			CalcResultModel calcResultModel{ 8u };
			calcResultModel.reactMessage(Message{ });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_3 });
			assert(calcResultModel.getValue() == "123");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_4 });
			assert(calcResultModel.getValue() == "1234");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_5 });
			assert(calcResultModel.getValue() == "12345");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_6 });
			assert(calcResultModel.getValue() == "123456");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_7 });
			assert(calcResultModel.getValue() == "1234567");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_8 });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_9 });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "1234567");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "123456");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "12345");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "1234");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "123");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SIGN });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SIGN });
			assert(calcResultModel.getValue() == "-1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "12.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "12 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "0.1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0.1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0.1 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SIGN });
			assert(calcResultModel.getValue() == "0.1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "2 =");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SIGN });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(1)");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(2)");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "2 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(2)");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "2");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "2 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_2 });
			assert(calcResultModel.getValue() == "12");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_3 });
			assert(calcResultModel.getValue() == "123");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_4 });
			assert(calcResultModel.getValue() == "1234");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_5 });
			assert(calcResultModel.getValue() == "12345");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_6 });
			assert(calcResultModel.getValue() == "123456");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_7 });
			assert(calcResultModel.getValue() == "1234567");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_8 });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_9 });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "12345678");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "12345678 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 =");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "12345679" });
			assert(calcResultModel.getValue() == "12345679");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "12345679");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "12345679");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "12345679 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_3 });
			assert(calcResultModel.getValue() == "3");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "3");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(3)");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "9" });
			assert(calcResultModel.getValue() == "9");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_MINUS });
			assert(calcResultModel.getValue() == "9");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "9 -");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "12345688" });
			assert(calcResultModel.getValue() == "12345688");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 =");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "12345687" });
			assert(calcResultModel.getValue() == "12345687");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQRT });
			assert(calcResultModel.getValue() == "12345687");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqrt(12345687)");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "3513.642" });
			assert(calcResultModel.getValue() == "3513.642");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "3513.642");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "3513.642 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_MINUS });
			assert(calcResultModel.getValue() == "3513.642");
			assert(calcResultModel.getMessage().head == Message::Head::LAST_BINARY_OPERATOR);
			assert(calcResultModel.getMessage().body == "-");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "0.1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_BACKSPACE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 =");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "11111.111" });
			assert(calcResultModel.getValue() == "11111.111");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DIVIDE });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 /");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 =");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "MATH ERROR" });
			assert(calcResultModel.getValue() == "MATH ERROR");
			assert(calcResultModel.getMessage().head == Message::Head::ERROR);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::FIXED);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DIVIDE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 /");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 +");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "MATH ERROR" });
			assert(calcResultModel.getValue() == "MATH ERROR");
			assert(calcResultModel.getMessage().head == Message::Head::ERROR);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_C });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::FIXED);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DIVIDE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 /");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 +");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "MATH ERROR" });
			assert(calcResultModel.getValue() == "MATH ERROR");
			assert(calcResultModel.getMessage().head == Message::Head::ERROR);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_CE });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::FIXED);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_3 });
			assert(calcResultModel.getValue() == "3");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_SQR });
			assert(calcResultModel.getValue() == "3");
			assert(calcResultModel.getMessage().head == Message::Head::UNARY_EXPR);
			assert(calcResultModel.getMessage().body == "sqr(3)");
			calcResultModel.reactMessage(Message{ Message::Head::EXPR_RESULT, "9" });
			assert(calcResultModel.getValue() == "9");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_0 });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_PLUS });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 +");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_1 });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_EQUAL });
			assert(calcResultModel.getValue() == "1");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "1 =");
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_DOT });
			assert(calcResultModel.getValue() == "0.");
			assert(calcResultModel.getMessage().head == Message::Head::EMPTY);
			calcResultModel.reactMessage(Message{ Message::Head::INPUT_MULTIPLY });
			assert(calcResultModel.getValue() == "0");
			assert(calcResultModel.getMessage().head == Message::Head::BINARY_EXPR);
			assert(calcResultModel.getMessage().body == "0 x");
		}
	}

	void testCalcResultModel()
	{
		testReactMessage();
	}
}

#endif